name: Scan Oneclick

on:
    workflow_dispatch:
      inputs:
            target:
              description: "Target repository to scan"
              default: "cornershop/python-oneclick"
              required: true
            target-branch: 
              description: "Target branch (optional)"
              default: "master"
              required: false
            target-directory:
              description: "Target directory"
              default: "oneclick/"
              required: true
            target-file: 
              description: "Target file (optional)"
              default: ""
              required: false
permissions:
  id-token: write # write jwt token
  actions: read # read gh actions
  contents: read # read access to the repo
  checks: write # unit test results
  security-events: write # write access to advanced security

jobs:
  build:
    name: Run Tools and Differential Analysis    
    runs-on: ubuntu-latest
    env:
      SCAN_DIRECTORY: ${{ github.workspace }}/scan-results
      PREV_SCAN_DIRECTORY: ${{ github.workspace }}/prev-scan-results
      ARTIFACT_DIRECTORY:  ${{ github.workspace }}/artifacts
      SCAN_TARGET_REPO:
      SCAN_TARGET_BRANCH:
      SCAN_TARGET_ROOT_PATH:
      SCAN_TARGET_FILE_PATH:
      REPO_SRC_DIR: target/
      SNYK_APIKEY: ${{ secrets.SNYK_CODE_APIKEY }}
    steps:
      - name: Clone Self
        uses: actions/checkout@v2     

      - name: Initialize
        shell: bash
        run: |
          SCAN_TARGET_REPO=${{ github.event.inputs.target }}
          echo "SCAN_TARGET_REPO=${SCAN_TARGET_REPO}" >> $GITHUB_ENV
          SCAN_TARGET_BRANCH=${{ github.event.inputs.target-branch }}
          echo "SCAN_TARGET_BRANCH=${SCAN_TARGET_BRANCH}" >> $GITHUB_ENV
          SCAN_TARGET_ROOT_PATH=${{ github.workspace }}/target/${{ github.event.inputs.target-directory }}
          echo "SCAN_TARGET_ROOT_PATH=${SCAN_TARGET_ROOT_PATH}" >> $GITHUB_ENV
          
          if [[ "${{ github.event.inputs.target-file }}" == "" ]]; then 
            SCAN_TARGET_FILE_PATH=${{ github.workspace }}/${{ env.REPO_SRC_DIR }}/${{ github.event.inputs.target-directory }}
          else
            SCAN_TARGET_FILE_PATH=${{ github.workspace }}/${{ env.REPO_SRC_DIR }}/${{ github.event.inputs.target-directory }}/${{ github.event.inputs.target-file }}
          fi
          echo "SCAN_TARGET_FILE_PATH=${SCAN_TARGET_FILE_PATH}" >> $GITHUB_ENV

          echo "Repository to scan: ${SCAN_TARGET_REPO}"
          echo "Directory to scan: ${SCAN_TARGET_ROOT_PATH}"
          echo "Filepath to scan: ${SCAN_TARGET_FILE_PATH}"          

          mkdir -p ${{ env.SCAN_DIRECTORY }}
          mkdir -p ${{ env.PREV_SCAN_DIRECTORY }}
          mkdir -p ${{ env.ARTIFACT_DIRECTORY }}
     
      - name: Clone Target Repo
        uses: actions/checkout@v2
        with:
          repository: ${{ env.SCAN_TARGET_REPO }}
          ref: ${{ env.SCAN_TARGET_BRANCH }}          
          path: ${{ env.REPO_SRC_DIR }} 

      - name: Initialize Scan Tools
        shell: bash
        run: |
          ./src/scripts/initialize.sh ${{ env.SCAN_TARGET_ROOT_PATH }} ${{ env.SCAN_TARGET_FILE_PATH }}
      
      - name: Execute Scan Tools
        shell: bash
        run: |
          ./src/scripts/execute.sh ${{ env.SCAN_TARGET_ROOT_PATH }} ${{ env.SCAN_TARGET_FILE_PATH }} ${{ env.SCAN_DIRECTORY }}    

      - name: Post-Execute Scan Tools
        shell: bash
        run: |
          ./src/scripts/post-execute.sh ${{ env.SCAN_TARGET_ROOT_PATH }} ${{ env.SCAN_TARGET_FILE_PATH }} ${{ env.SCAN_DIRECTORY }}     

      - name: Download artifact
        uses: Legit-Labs/action-download-artifact@v2
        continue-on-error: true
        with:          
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: amaroq-code.yml        
          # workflow_conclusion: success
          name: scan-results
          path: ${{ env.PREV_SCAN_DIRECTORY }}

      - name: List scan result files
        shell: bash
        run: |
          cd prev-scan-results
          ls

      - name: Pull Amaroq
        shell: bash
        run: |
          docker pull public.ecr.aws/pumasecurity/amaroq:latest      
      
      - name: Run Amaroq
        shell: bash
        run: |
          for f in ${{ env.SCAN_DIRECTORY }}/*
          do
            scan_result="${f##*/}"  
            scan_result_no_ext="${scan_result%%.*}"     
            tool="GenericSarif"
            if [[ $scan_result_no_ext == "snyk" ]]; then
              tool="SnykOpenSource"
            fi

            prev_scan_result_pattern="${{ env.PREV_SCAN_DIRECTORY }}/$scan_result_no_ext*"

            previous_scan_result=
            for p in $prev_scan_result_pattern
            do
              previous_scan_result=$p
            done         

            if test -f "$previous_scan_result"; then
              echo "$previous_scan_result exists."              
              echo "docker run -v ${{ env.PREV_SCAN_DIRECTORY }}:/prev-scan-results -v ${{ env.SCAN_DIRECTORY }}:/scan-results -v ${{ env.ARTIFACT_DIRECTORY }}:/artifacts public.ecr.aws/pumasecurity/amaroq:latest amaroq --tool $tool --previous /prev-scan-results/${scan_result_no_ext}.sarif --current /scan-results/${scan_result} --output-directory /artifacts --output-filename ${scan_result_no_ext}.sarif"
              docker run -v ${{ env.PREV_SCAN_DIRECTORY }}:/prev-scan-results -v ${{ env.SCAN_DIRECTORY }}:/scan-results -v ${{ env.ARTIFACT_DIRECTORY }}:/artifacts public.ecr.aws/pumasecurity/amaroq:latest amaroq --tool $tool --previous /prev-scan-results/${scan_result_no_ext}.sarif --current /scan-results/${scan_result} --output-directory /artifacts --output-filename ${scan_result_no_ext}.sarif
            else
              echo "$previous_scan_result does not exists."         
              echo "docker run -v ${{ env.SCAN_DIRECTORY }}:/scan-results -v ${{ env.ARTIFACT_DIRECTORY }}:/artifacts public.ecr.aws/pumasecurity/amaroq:latest amaroq --tool $tool --current /scan-results/${scan_result} --output-directory /artifacts --output-filename ${scan_result_no_ext}.sarif"
              docker run -v ${{ env.SCAN_DIRECTORY }}:/scan-results -v ${{ env.ARTIFACT_DIRECTORY }}:/artifacts public.ecr.aws/pumasecurity/amaroq:latest amaroq --tool $tool --current /scan-results/${scan_result} --output-directory /artifacts --output-filename ${scan_result_no_ext}.sarif
            fi                
          done                 

      - name: Publish Sarif Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: scan-results
          path: ${{ env.ARTIFACT_DIRECTORY }}/*.sarif          

      - name: Publish Logs
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: ${{ env.ARTIFACT_DIRECTORY }}/*.log

      - name: Publish Summaries
        uses: actions/upload-artifact@v3
        with:
          name: summaries
          path: ${{ env.ARTIFACT_DIRECTORY }}/*.json
      
      - name: Uploading SARIF files CodeQL
        uses: github/codeql-action/upload-sarif@main
        with:
          sarif_file: ${{ env.ARTIFACT_DIRECTORY }}
